# Script start parameter
param (
    [Parameter(Mandatory = $True)] $configTemplatePath,
    [Parameter(Mandatory = $True)] $dbType,
    [Parameter(Mandatory = $False)] $apiKey,
    [Parameter(Mandatory = $False)] $baseUri,
    [Parameter(Mandatory = $False)] [switch] $short,
    [Parameter(Mandatory = $False)] $dbPassword
)

Write-Host "Using PowerShell-Version: '$($PSVersionTable.PSVersion)'"
Write-Host "Starting test import at (UTC): $(Get-Date -Format "dd/MM/yyyy HH:mm:ss K")"

$global:ENTITY_TYPE_PLURAL_NAME = "generic_entity_type_$([DateTimeOffset]::Now.ToUnixTimeMilliseconds())"
[System.Uri] $global:parsedBaseUri = ""

# Read and parse the config file
# Check if the creation of a default config is needed
$configuration = $null;
$scriptConfigFilePath = "$configTemplatePath"

if (!(Test-Path $scriptConfigFilePath -PathType Leaf)) {
    Write-Host "Config '$configTemplatePath' does not exist!" -ForegroundColor Red
    exit -1
}

$scriptConfigJson = Get-Content -Raw -Path $scriptConfigFilePath
$configuration = $scriptConfigJson | ConvertFrom-Json

if ($dbType -eq "csv") {
    if ($short -and $configuration.dbType -eq "CSV") {
        Write-Host "Executing the short test"
        $configuration.csvPath = "$PSScriptRoot/csv/data/generic_entity_type_mock_data-short.csv"
    }
    else {
        Write-Host "Executing the long test"
        $configuration.csvPath = "$PSScriptRoot/csv/data/generic_entity_type_mock_data-1k.csv"
    }
}
elseif ($dbType -ne "mssql") {
    Write-Host "Provided dbType '$dbType' does not exist! Please use 'csv' or 'mssql'" -ForegroundColor Red
    exit -1
}


# Set API key and base uri in json config, but only if the script is executed in the context of the pipeline.
# Determine if script is executed in github actions runner:
# CI env variable (https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables)
if ($Env:CI) {
    Write-Host "Execution in a runner"
}

if ($apiKey) {
    Write-Host "Overriding API key"
    # Set the API key
    $configuration.apiKey = $apiKey;
}
if ($baseUri) {
    Write-Host "Overriding base uri"
    # Set the uri
    $configuration.baseUri = $baseUri;
}
if ($dbPassword) {
    Write-Host "Overriding db password"
    # Set the uri
    $configuration.password = $dbPassword;
}

# Set entity type plural name
$configuration.entityPluralName = $ENTITY_TYPE_PLURAL_NAME

# Create uri
[System.Uri]::TryCreate($Configuration.baseUri, 'Absolute', [ref]$global:parsedBaseUri)

# Serialize the config object to json and override the config json with the the new config file
$scriptConfigFilePath = "$PSScriptRoot\ScriptConfig.autogenerated.json"
$configuration | ConvertTo-Json | Out-File $scriptConfigFilePath

# Setup test environment
$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Authorization", "Bearer $($configuration.apiKey)")
$headers.Add("Origin", $global:parsedBaseUri.Scheme + "://" + $global:parsedBaseUri.Host)
$headers.Add("Content-Type", "application/json")
$headers.Add("Accept", "application/json")

# Get model Id of "dataupload_script"
$url = [uri]::EscapeUriString($global:parsedBaseUri.ToString() + "businessobjects/core/models/CustomModels");
try {
    $response = Invoke-RestMethod $url -Method GET -Headers $headers -UserAgent "dvelop-bo-toolkit_script_test_wrapper"
    Write-Host $response
    $response.value | ForEach-Object {
        if ($_.name -eq "dataupload_script") {
            $modelId = $_.id
        }
    }
}
catch {
    Write-Warning "Could not retrieve model id! Make sure the model 'dataupload_script' exists and is staged. Additional Information: '$_'"
    exit -1
}

# Create entity type model (always)
$entityType = @"
{
    "name": "$ENTITY_TYPE_PLURAL_NAME",
    "pluralName": "$ENTITY_TYPE_PLURAL_NAME",
    "description": "A generic entity type that has all properties the upload script supports",
    "key": {
        "name": "primary_key",
        "type": "int32"
    },
    "properties": [
        {
            "name": "string",
            "type": "string",
            "required": true,
            "indexed": true
        },
        {
            "name": "boolean",
            "type": "boolean"
        },
        {
            "name": "dateTimeOffset",
            "type": "dateTimeOffset"
        },
        {
            "name": "double",
            "type": "double"
        },
        {
            "name": "guid",
            "type": "guid"
        },
        {
            "name": "int16",
            "type": "int16"
        },
        {
            "name": "int32",
            "type": "int32"
        },
        {
            "name": "int64",
            "type": "int64"
        },
        {
            "name": "date",
            "type": "date"
        }
    ]
}
"@;
$url = [uri]::EscapeUriString($global:parsedBaseUri.ToString() + "businessobjects/core/models/CustomModels/$modelId/entitytypes");
try {
    $response = Invoke-RestMethod $url -Method POST -Headers $headers -Body $entityType -UserAgent "dvelop-bo-toolkit_script_test_wrapper"
    Write-Host $response
    $entityTypeId = $response.id
}
catch {
    Write-Warning "Could not create entityt type! Additional Information: '$_'"
    exit -1
}

# add entity that will be deleted
$entity = @'
    {
        "primary_key": 999999,
        "string": "Not exists",
        "boolean": true,
        "dateTimeOffset": "2020-12-31T12:00:00Z",
        "double": "9999999.999",
        "guid": "ac9d69fe-a9fd-4233-85db-52026687e5e3",
        "int16": 16,
        "int32": 32,
        "int64": 64,
        "date": "2020-12-31"
    }
'@
$url = [uri]::EscapeUriString($global:parsedBaseUri.ToString() + "businessobjects/custom/dataupload_script/$ENTITY_TYPE_PLURAL_NAME");
try {
    Invoke-RestMethod $url -Method POST -Headers $headers -Body $entity -UserAgent "dvelop-bo-toolkit_script_test_wrapper"
}
catch {
    Write-Warning "Could not add entity for deletion! Additional Information: '$_'"
    exit -1
}

# add entity that will be updated
$entity = @'
    {
        "primary_key": 1,
        "string": "Not exists",
        "boolean": true,
        "dateTimeOffset": "2020-12-31T12:00:00Z",
        "double": "9999999.999",
        "guid": "ac9d69fe-a9fd-4233-85db-52026687e5e3",
        "int16": 16,
        "int32": 32,
        "int64": 64,
        "date": "2020-12-31"
    }
'@
$url = [uri]::EscapeUriString($global:parsedBaseUri.ToString() + "businessobjects/custom/dataupload_script/$ENTITY_TYPE_PLURAL_NAME");
try {
    Invoke-RestMethod $url -Method POST -Headers $headers -Body $entity -UserAgent "dvelop-bo-toolkit_script_test_wrapper"
}
catch {
    Write-Warning "Could not add entity for update! Additional Information: '$_'"
    exit -1
}

$stopwatch = [system.diagnostics.stopwatch]::StartNew()

Write-Host "Starting import script with config: '$scriptConfigFilePath'"
# Start bo upload script depending on the PS version
if ($PSVersionTable.PSVersion.Major -gt 5) {
    pwsh "$PSScriptRoot/../BusinessObjectsUpload.ps1" -configPath $scriptConfigFilePath
}
else {
    powershell "$PSScriptRoot/../BusinessObjectsUpload.ps1" -configPath $scriptConfigFilePath
}

$totalSecs = [math]::Round($stopwatch.Elapsed.TotalSeconds, 0)

# Delete test entity type and all its entities. The model "dataupload_script" will not be deleted!
$url = [uri]::EscapeUriString($global:parsedBaseUri.ToString() + "businessobjects/core/models/CustomModels/$modelId/entitytypes/$entityTypeId");
try {
    Invoke-RestMethod $url -Method DELETE -Headers $headers -UserAgent "dvelop-bo-toolkit_script_test_wrapper"
}
catch {
    Write-Host "Could not delete entity type! Ignoring this error for now, because the test execution is finished. Additional Information: '$_'"
}

# Delete autogenerated script config from test folder
Remove-Item $scriptConfigFilePath -ErrorAction Ignore

if ($LASTEXITCODE -ne 0) {
    Write-Host "Execution of data upload script test failed after $totalSecs seconds..." -ForegroundColor Red
    Write-Host "Exit code is $LASTEXITCODE" -ForegroundColor Red

    exit -1
}
Write-Host "Execution of data upload script test finished after $totalSecs seconds..."